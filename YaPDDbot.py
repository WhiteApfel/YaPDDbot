import logging
import requests
from aiogram import Bot, types
from aiogram.contrib.middlewares.logging import LoggingMiddleware
from aiogram.dispatcher import Dispatcher
from aiogram.utils.executor import start_webhook
import random
import re
import pymongo
import time
import string

API_TOKEN = '211412442:NJjdfsdfbsbjhb#Bjh3bjhb#HJV3ghhg3'
PDD_TOKEN = "UCTKVTCYFVV43JCANEDBLEUFT6BFPCCRQATIWFOHKDAB76JPO64Q"
EXAMPLE_MAILBOX = "topolya@imgay.design"
RE_SHORT = r"[\w\d]{1,3}@imgay\.design"
RE_NORMAL = r"[\w\d]{4,32}@imgay\.design"
CONTACT_USERNAME = "whiteapfel"
BLAGODAROCKA = f'\n\nPS. –°–µ—Ä–≤–µ—Ä–∞ –∏ –¥–æ–º–µ–Ω —Å—Ç–æ—è—Ç –¥–µ–Ω—è–∫–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –æ–ø–ª–∞—á–∏–≤–∞—é—Ç—Å—è –∏–∑ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Å—Ä–µ–¥—Å—Ç–≤. –ë—É–¥—É –±–µ–∑–º–µ—Ä–Ω–æ —Ä–∞–¥, ' \
			   f'–µ—Å–ª–∏ –ø–æ–¥–¥–µ—Ä–∂–∏—à—å —Ä—É–±–ª–∏–∫–æ–º. <a href="https://rocketbank.ru/whiteapfel">–†–æ–∫–µ—Ç</a>\n\n' \
			   f'PPS. –ü–æ—á—Ç—É –æ–±—Å–ª—É–∂–∏–≤–∞–µ—Ç –Ø–Ω–¥–µ–∫—Å –∏ —è –∫ –Ω–µ–π –Ω–µ –∏–º–µ—é –Ω–∏–∫–∞–∫–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞, —Ç–æ–ª—å–∫–æ —Å–æ–∑–¥–∞—é –∏ –ø–µ—Ä–µ–¥–∞—é —Ç–µ–±–µ —Å—Ç–∞—Ä—Ç–æ–≤—ã–π –ø–∞—Ä–æ–ª—å'


# webhook settings
WEBHOOK_HOST = f'https://any.host.tld'
WEBHOOK_PATH = f'/{API_TOKEN}'  # –ò–ª–∏ –ª—é–±–æ–π –¥—Ä—É–≥–æ–π –Ω—É–∂–Ω—ã–π –ø—É—Ç—å
WEBHOOK_URL = f'{WEBHOOK_HOST}{WEBHOOK_PATH}'
# webserver settings
WEBAPP_HOST = '0.0.0.0'  # or ip
WEBAPP_PORT = 32123
# DB settings
DB = pymongo.MongoClient("mongodb://user:password@127.0.0.1:2717/")

logging.basicConfig(level=logging.CRITICAL)

bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)
dp.middleware.setup(LoggingMiddleware())


def gen_tmplt(what: str):
	if what == "sorry":
		return random.choice(['–ò–∑–≤–∏–Ω–∏', '–ü—Ä–æ—Å—Ç–∏', '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ—Å—Ç–∏', '–ü—Ä–æ—Å—Ç–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞', '–ú–Ω–µ –∂–∞–ª—å',
								'–ú–Ω–µ –±–µ–∑—É–º–Ω–æ –∂–∞–ª—å',  '–ú–Ω–µ –ø—Ä–∞–≤–¥–∞ –∂–∞–ª—å', '–£–ø—Å', '–£–≤—ã'])
	if what == "name":
		return random.choice(['—Å–æ–ª–Ω—ã—à–∫–æ', '–∑–∞–π–∫–∞', '–∫–æ—Ç–µ–Ω—å–∫–∞', '–ª–∏—Å—è'])
	if what == "where":
		return random.choice(['—è —Ä–∞–±–æ—Ç–∞—é', '—è —ç—Ç–æ –¥–µ–ª–∞—é', '—è –¥–µ–ª–∞—é —ç—Ç–æ', '—ç—Ç–æ –¥–µ–ª–∞–µ—Ç—Å—è', '–º–æ–≥—É —ç—Ç–æ —Å–¥–µ–ª–∞—Ç—å'])
	if what == "how":
		return random.choice(['—Ç–æ–ª—å–∫–æ ', '–∏—Å–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ ', '–Ω–∏–≥–¥–µ –±–æ–ª—å—à–µ, –∫—Ä–æ–º–µ –∫–∞–∫ ', ''])
	if what == "pm":
		return random.choice(['–ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö', '–õ–°', '–ª–∏—á–∫–µ', 'PM', 'DM'])


@dp.message_handler(commands=['reg_gaymail', "start", "help"])
async def gaymail_reg(message: types.Message):
	if message.chat.type == "private":
		await message.answer(
			f"–Ø —Ç—É—Ç –ø–æ—á—Ç–æ–≤—ã–µ —è—â–∏—á–∫–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É—é –Ω–∞ –¥–æ–º–µ–Ω–µ <code>{EXAMPLE_MAILBOX.split('@')[-1]}</code>\n\n"
			f"–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ –ø–æ—á—Ç–æ–≤—ã–π —è—â–∏–∫, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—á–µ—à—å –ø–æ–ª—É—á–∏—Ç—å, –≤ —Ñ–æ—Ä–º–∞—Ç–µ <code>{EXAMPLE_MAILBOX}</code>. –û–Ω "
			f"–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–æ–ª–∂–µ–Ω –æ–∫–∞–Ω—á–∏–≤–∞—Ç—å—Å—è –Ω–∞\xa0<code>@{EXAMPLE_MAILBOX.split('@')[-1]}</code>.",
			parse_mode="HTML")
	else:
		await message.reply(f"{gen_tmplt('sorry')}, {gen_tmplt('name')}, –Ω–æ {gen_tmplt('where')} "
						f"{gen_tmplt('how')}–≤ {gen_tmplt('pm')}")


@dp.message_handler(lambda m: re.match(RE_SHORT, m.text.lower()))
async def gaymail_email_short(message: types.Message):
	await message.reply(f'{gen_tmplt("sorry")}, –º–µ–Ω—å—à–µ 4 —Å–∏–º–≤–æ–ª–æ–≤ –Ω–µ–ª—å–∑—è, —Ç–∞–∫–∏–µ –ø—Ä–∞–≤–∏–ª–∞. '
		f'–ò —á—Ç–æ —Ç—ã –º–Ω–µ —Å–¥–µ–ª–∞–µ—à—å? –Ø –≤ –¥—Ä—É–≥–æ–º –≥–æ—Ä–æ–¥–µ!\n\n–ú–æ–∂–µ—à—å –Ω–∞–ø–∏—Å–∞—Ç—å @{CONTACT_USERNAME}, —Ç–µ–±–µ –ø–æ—Å—Ç–∞—Ä–∞—é—Ç—Å—è –ø–æ–º–æ—á—å')


@dp.message_handler(lambda m: re.match(RE_NORMAL, m.text.lower()))
async def gaymail_email_normal(message: types.Message):
	if message.from_user.id not in DB.WAEmail.accounts.distinct("user_id"):
		pw = "".join([random.choice(string.ascii_letters+string.digits) for _ in range(15)])
		ul = message.text.lower().split("@")[0]
		if ul not in DB.WAEmail.accounts.distinct("login"):
			un = message.from_user.username if message.from_user.username else message.from_user.first_name
			DB.WAEmail.accounts.save({"login": ul, "password": pw, "user_id": message.from_user.id, "username": str(un),
											"protected": False, "time": int(time.time()), "status": "wait"})
			await message.reply(f'–ü–æ–Ω—è–ª, –ø—Ä–∏–Ω—è–ª. –°–∫–æ—Ä–æ –Ω–∞–ø–∏—à—É —Ç–µ–±–µ –æ —Ä–µ—à–µ–Ω–∏–∏ –ø–æ {ul}@{EXAMPLE_MAILBOX.split("@")[-1]} üòâ'
								f'{BLAGODAROCKA}',
					parse_mode="HTML")
			keyboard = types.InlineKeyboardMarkup()
			keyboard.add(
				types.InlineKeyboardButton(text="–ù—É –Ω–µ—Ç", callback_data=f"gaymail|no|{ul}|{message.from_user.id}"),
				types.InlineKeyboardButton(text="–û–∫–µ–π!", callback_data=f"gaymail|yes|{ul}|{message.from_user.id}")
			)
			await bot.send_message(248733366, f'–¢—É—Ç —Ö–æ—Ç—è—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å —è—â–∏—á–µ–∫.\n\n–õ–æ–≥–∏–Ω: {ul}\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{un} -'
										f' {message.from_user.id}', reply_markup=keyboard)
		else:
			await message.reply(f"–£–≤—ã, –Ω–æ —ç—Ç–æ—Ç –ø–æ—á—Ç–æ–≤—ã–π —è—â–∏–∫ —è —É–∂–µ –∫–æ–º—É-—Ç–æ –æ—Ç–¥–∞–ª.\n\n–ï—Å–ª–∏ –æ–Ω —Ç–µ–±–µ –æ—á–µ–Ω—å –Ω—É–∂–µ–Ω, –Ω–∞–ø–∏—à–∏ –≤ "
							f"–ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è @{CONTACT_USERNAME}")
	else:
		await message.reply(f"–ú–Ω–µ –∂–∞–ª—å, –Ω–æ –Ω–∞ —Ç–µ–±—è —É–∂–µ –∑–∞–≤–æ–¥–∏–ª–∏ —è—â–∏–∫, –∞ —è –±–æ–ª—å—à–µ –æ–¥–Ω–æ–≥–æ –Ω–µ –º–æ–≥—É –≤—ã–¥–∞—Ç—å üòû\n\n–ï—Å–ª–∏ —É–≤–µ—Ä–µ–Ω, "
						f"—á—Ç–æ —ç—Ç–æ –æ—à–∏–±–æ—á–∫–∞, –Ω–∞–ø–∏—à–∏ –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è @{CONTACT_USERNAME}")


@dp.callback_query_handler(lambda call: call.data.split("|")[0] == "gaymail")
async def gaymail_callback_base(call: types.CallbackQuery):
	act = call.data.split("|")[1]
	user_info = DB.WAEmail.accounts.find({"user_id": int(call.data.split("|")[3])})[0]
	if act == "yes":
		r = requests.post("https://pddimp.yandex.ru/api2/admin/email/add",
						data={"domain": EXAMPLE_MAILBOX.split('@')[-1], "login": user_info["login"], "password": user_info["password"]},
						headers={"PddToken": PDD_TOKEN}).json()
		if r["success"] == "ok":
			keyboard = types.InlineKeyboardMarkup()
			keyboard.add(
				types.InlineKeyboardButton(text="üîê –ü–æ–ª—É—á–∏—Ç—å –ø–∞—Ä–æ–ª—å",
					callback_data=f'gaymailpsswd|{user_info["user_id"]}')
			)
			await bot.send_message(user_info["user_id"],
							f'<b>–£—Å–ø–µ—Ö! –°–æ–∑–¥–∞–Ω–æ üéâ</b>\n\n'
							f''
							f'–Ø—â–∏–∫ {user_info["login"]}@{EXAMPLE_MAILBOX.split("@")[-1]} —Ç–µ–ø–µ—Ä—å —Ç–≤–æ–π.\n\n'
							f''
							f'–ú–æ–∂–µ—à—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –Ø–Ω–¥–µ–∫—Å.–ü–æ—á—Ç—É –∏–ª–∏ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å —Å–≤–æ–π –ø–æ—á—Ç–æ–≤—ã–π –∫–ª–∏–µ–Ω—Ç:\n\n'
							f''
							f'~~ ~~ ~~ ~~ ~~ ~~ ~~\n'
							f'<b>IMAP</b>\n'
							f'–°–µ—Ä–≤–µ—Ä: <code>imap.yandex.ru</code>\n'
							f'–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ: <code>SSL</code>\n'
							f'–ü–æ—Ä—Ç: <code>993</code>\n\n'
							f''
							f'<b>SMTP</b>\n'
							f'–°–µ—Ä–≤–µ—Ä: <code>smtp.yandex.ru</code>\n'
							f'–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ: <code>SSL</code>\n'
							f'–ü–æ—Ä—Ç: <code>465</code>\n'
							f'~~ ~~ ~~ ~~ ~~ ~~ ~~\n\n'
							f''
							f'<b>–õ–æ–≥–∏–Ω</b>: <code>{user_info["login"]}@{EXAMPLE_MAILBOX.split("@")[-1]}</code>\n\n'
							f''
							f'–ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ä—Ç–æ–≤—ã–π –ø–∞—Ä–æ–ª—å, –Ω–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É —Å–Ω–∏–∑—É. '
							f'–†–µ–∫–æ–º–µ–Ω–¥—É—é —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–π—Ç–∏ –Ω–∞ https://mail.yandex.ru –∏ —Å–º–µ–Ω–∏—Ç—å –µ–≥–æ.',
							disable_web_page_preview=True, parse_mode="HTML", reply_markup=keyboard)
			DB.WAEmail.accounts.update({"user_id": user_info["user_id"]},
											{"$set": {"status": "OK", "time": int(time.time())}})
			await bot.answer_callback_query(callback_query_id=call.id, text="–£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!")
			await bot.edit_message_text(
				f'<b>–£—Å–ø–µ—Ö! –°–æ–∑–¥–∞–Ω–æ!</b>\n\n'
				f'{user_info["login"]}@{EXAMPLE_MAILBOX.split("@")[-1]} —Ç–µ–ø–µ—Ä—å —É @{user_info["username"]}',
				chat_id=call.message.chat.id, message_id=call.message.message_id, parse_mode="HTML")
		else:
			await bot.send_message(248733366, f"–¢—É—Ç –æ—à–∏–±–∫–∞:\n\n{str(r)}")
	else:
		DB.WAEmail.accounts.remove({"user_id": user_info["user_id"]})
		await bot.send_message(user_info["user_id"],
				f'–ú–Ω–µ –∂–∞–ª—å, —Ç–≤–æ—è –∑–∞—è–≤–∫–∞ –Ω–∞ {user_info["login"]}@{EXAMPLE_MAILBOX.split("@")[-1]} –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.\n\n'
				f'–ï—Å–ª–∏ —Ç–µ–±–µ –æ—á–µ–Ω—å —Ö–æ—á–µ—Ç—Å—è —ç—Ç–æ—Ç –ø–æ—á—Ç–æ–≤—ã–π —è—â–∏–∫, –º–æ–∂–µ—à—å –Ω–∞–ø–∏—Å–∞—Ç—å @{CONTACT_USERNAME}')
		await bot.delete_message(call.message.chat.id, call.message.message_id)
		await bot.answer_callback_query(callback_query_id=call.id, text="–£–¥–∞–ª–µ–Ω–æ –∏ —É–Ω–∏—á—Ç–æ–∂–µ–Ω–æ")


@dp.callback_query_handler(lambda call: call.data.split("|")[0] == "gaymailpsswd")
async def gaymail_callback_password(call: types.CallbackQuery):
	user_info = DB.WAEmail.accounts.find({"user_id": int(call.data.split("|")[1])})[0]
	start_message = "–ö—Ç–æ-—Ç–æ –≥–æ–≤–æ—Ä–∏–ª, —á—Ç–æ —É–∂–µ –∏–∑–º–µ–Ω–∏–ª –ø–∞—Ä–æ–ª—å. –ù–æ–≤—ã–π —è –Ω–µ –∑–Ω–∞—é, –Ω–æ...\n\n–°—Ç–∞—Ä—Ç–æ–≤—ã–π" if user_info[
		"protected"] else "–ü–∞—Ä–æ–ª—å"
	finish_message = "–ï—Å–ª–∏ –≤—Å—ë –∂–µ –µ—â—ë —Å—Ç–æ–∏—Ç —ç—Ç–æ—Ç, –∏–∑–º–µ–Ω–∏ –µ–≥–æ" if user_info["protected"] else "–ò–∑–º–µ–Ω–∏ –µ–≥–æ"
	psswd_message = "–ü–∞—Ä–æ–ª—å —Ç–æ—á–Ω–æ –∏–∑–º–µ–Ω—ë–Ω" if user_info["protected"] else "–ü–∞—Ä–æ–ª—å –∏–∑–º–µ–Ω—ë–Ω"
	keyboard = types.InlineKeyboardMarkup()
	keyboard.add(
		types.InlineKeyboardButton(text=f"üîê {psswd_message}", callback_data=f'gaymailpsswdprotected|{user_info["user_id"]}')
	)
	await bot.send_message(chat_id=call.message.chat.id,
					text=f'{start_message}: <code>{user_info["password"]}</code>\n\n{finish_message}, '
						f'–∏—Å–ø–æ–ª—å–∑—É—è <a href="https://mail.yandex.ru">–Ø–Ω–¥–µ–∫—Å.–ü–æ—á—Ç—É</a>.',
					parse_mode="HTML", disable_web_page_preview=True, reply_markup=keyboard)
	await bot.answer_callback_query(callback_query_id=call.id)


@dp.callback_query_handler(lambda call: call.data.split("|")[0] == "gaymailpsswdprotected")
async def gaymail_callback_passwordprotected(call: types.CallbackQuery):
	DB.WAEmail.accounts.update({"user_id": int(call.data.split("|")[1])}, {"$set": {"protected": True}})
	await bot.delete_message(call.message.chat.id, call.message.message_id)


@dp.message_handler(commands=["ping"])
async def echo(message: types.Message):
	await bot.send_message(message.chat.id, "/pong")


async def on_startup(dp):
	await bot.set_webhook(WEBHOOK_URL)


# insert code here to run it after start


async def on_shutdown(dp):
	logging.warning('Shutting down..')

	# insert code here to run it before shutdown

	# Remove webhook (not acceptable in some cases)
	await bot.delete_webhook()

	# Close DB connection (if used)
	await dp.storage.close()
	await dp.storage.wait_closed()

	logging.warning('Bye!')


if __name__ == '__main__':
	start_webhook(
		dispatcher=dp,
		webhook_path=WEBHOOK_PATH,
		on_startup=on_startup,
		on_shutdown=on_shutdown,
		skip_updates=True,
		host=WEBAPP_HOST,
		port=WEBAPP_PORT
	)
